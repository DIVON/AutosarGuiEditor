///////////////////////////////////////////////////////////
//  ComponentPainter.cs
//  Implementation of the Class ComponentPainter
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:10
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml.Linq;
using System.Windows.Media;
using System.Windows;
using AutosarGuiEditor.Source.Utility;
using AutosarGuiEditor.Source.Render;
using System.Windows.Media.Imaging;
using AutosarGuiEditor.Source.SystemInterfaces;
using AutosarGuiEditor.Source.Painters.PortsPainters;
using AutosarGuiEditor.Source.Component;
using AutosarGuiEditor.Source.PortDefenitions;
using AutosarGuiEditor.Source.Painters.Components.PerInstance;
using AutosarGuiEditor.Source.Component.PerInstanceMemory;
using AutosarGuiEditor.Source.Fabrics;
using AutosarGuiEditor.Source.Painters.Components.CData;
using AutosarGuiEditor.Source.Component.CData;
using AutosarGuiEditor.Source.Autosar.Events;


namespace AutosarGuiEditor.Source.Painters
{
    public class ComponentInstance : IElementWithPorts
    {
        public AutosarEventInstancesList OneTimeEventsList = new AutosarEventInstancesList();
        public AutosarEventInstancesList TimingEventsList = new AutosarEventInstancesList();
        public AutosarEventInstancesList SyncClientServerEventsInstancesList = new AutosarEventInstancesList();
        public AutosarEventInstancesList AsyncClientServerEventsInstancesList = new AutosarEventInstancesList();
        public PimInstancesList PerInstanceMemories = new PimInstancesList();
        public CDataInstancesList CDataInstances = new CDataInstancesList();

        public ApplicationSwComponentType ComponentDefenition
        {
            get
            {
                return AutosarApplication.GetInstance().ComponentDefenitionsList.FindObject(this.ComponentDefenitionGuid);
            }
        }

        Guid componentDefenitionGuid;
        public Guid ComponentDefenitionGuid
        {
            set
            {
                componentDefenitionGuid = value;
            }
            get
            {
                return componentDefenitionGuid;
            }
        }

        public ComponentInstance()
        {
           
        }

        public override void Render(RenderContext context)
        {
            base.Render(context);

            /* Draw component name*/
            GlyphFont glyphFont = LetterGlyphTool.GetFont(AutosarApplication.GetInstance().ComponentNameFont);
            int width = glyphFont.GetTextWidth(Name);
            int textHeight = glyphFont.GetTextHeight(Name);

            Point textCoord = Painter.Center;
            textCoord.Y = Painter.Top;
            textCoord = context.GetImageCoordinate(textCoord);
            textCoord.Y += textHeight;
            textCoord.X -= (double)width / 2.0d;
            context.Bitmap.DrawString((int)textCoord.X, (int)textCoord.Y, Colors.Black, AutosarApplication.GetInstance().ComponentNameFont, Name);

            String defName = "<" + this.ComponentDefenition.Name + ">";
            glyphFont = LetterGlyphTool.GetFont(AutosarApplication.GetInstance().ComponentDefinitionNameFont);
            width = glyphFont.GetTextWidth(defName);

            textCoord = Painter.Center;
            textCoord.Y = Painter.Top;
            textCoord = context.GetImageCoordinate(textCoord);
            textCoord.X -= (double)width / 2.0d;
            
            context.Bitmap.DrawString((int)textCoord.X, (int)textCoord.Y, Colors.Black, AutosarApplication.GetInstance().ComponentDefinitionNameFont, defName);
        }


        public override void LoadFromXML(XElement xml)
        {
            base.LoadFromXML(xml);
            PerInstanceMemories.LoadFromXML(xml);
            CDataInstances.LoadFromXML(xml);
            TimingEventsList.LoadFromXML(xml, "Timing");
            SyncClientServerEventsInstancesList.LoadFromXML(xml, "Sync");
            AsyncClientServerEventsInstancesList.LoadFromXML(xml, "Async");
            OneTimeEventsList.LoadFromXML(xml, "OneTime");
            String compDefString = XmlUtilits.GetFieldValue(xml, "ComponentDefenitionGuid", Guid.Empty.ToString());
            ComponentDefenitionGuid = GuidUtils.GetGuid(compDefString, false);
        }


        public override void WriteToXML(XElement root)
        {
            XElement xmlElement = new XElement("ComponentInstance");
            base.WriteToXML(xmlElement);  
            PerInstanceMemories.WriteToXML(xmlElement);
            CDataInstances.WriteToXML(xmlElement);
            TimingEventsList.WriteToXML(xmlElement, "Timing");
            SyncClientServerEventsInstancesList.WriteToXML(xmlElement, "Sync");
            AsyncClientServerEventsInstancesList.WriteToXML(xmlElement, "Async");
            OneTimeEventsList.WriteToXML(xmlElement, "OneTime");
            XElement comptDefenitionGuid = new XElement("ComponentDefenitionGuid", ComponentDefenitionGuid.ToString());
            xmlElement.Add(comptDefenitionGuid);

            root.Add(xmlElement);
        }

        public void UpdatePims()
        {
            /* Delete unexists */
            for (int i = PerInstanceMemories.Count - 1; i >= 0; i--)
            {
                PimInstance pimInstance = PerInstanceMemories[i];
                if (ComponentDefenition.PerInstanceMemoryList.FindObject(pimInstance.DefenitionGuid) == null)
                {
                    PerInstanceMemories.RemoveAt(i);
                }
            }


            /* Adding */
            foreach (PimDefenition pimDef in ComponentDefenition.PerInstanceMemoryList)
            {
                if (PerInstanceMemories.GetPim(pimDef) == null)
                {
                    PimInstance pimInstace = PimFabric.GetInstance().CreatePimInstance(pimDef);
                    PerInstanceMemories.Add(pimInstace);
                }
            }

            /* Refresh default values */
            foreach (PimInstance pim in PerInstanceMemories)
            {
                pim.UpdateDefaultValues();
            }
        }

        public void UpdatePimNames()
        {
            for (int i = PerInstanceMemories.Count - 1; i >= 0; i--)
            {
                PimInstance pimInstance = PerInstanceMemories[i];
                pimInstance.Name = pimInstance.Defenition.Name;
                pimInstance.SyncronizeName();
            }
        }

        public void UpdateCDataNames()
        {
            for (int i = CDataInstances.Count - 1; i >= 0; i--)
            {
                CDataInstance instance = CDataInstances[i];
                instance.Name = instance.Defenition.Name;
                instance.SyncronizeName();
            }
        }

        public void UpdateCData()
        {
            /* Delete unexists */
            for (int i = CDataInstances.Count - 1; i >= 0; i--)
            {
                CDataInstance instance = CDataInstances[i];
                if (ComponentDefenition.CDataDefenitions.FindObject(instance.DefenitionGuid) == null)
                {
                    CDataInstances.RemoveAt(i);
                }
            }


            /* Adding */
            foreach (CDataDefenition def in ComponentDefenition.CDataDefenitions)
            {
                if (CDataInstances.GetCData(def) == null)
                {
                    CDataInstance instance = CDataFabric.GetInstance().CreateCDataInstance(def);
                    CDataInstances.Add(instance);
                }
            }

            /* Refresh default values */
            foreach (CDataInstance instance in CDataInstances)
            {
                instance.UpdateDefaultValues();
            }
        }

        public void SyncronizeTimingEventsWithDefenition()
        {
            /* TimingEvents */

            /* Delete non existing */
            for (int i = TimingEventsList.Count - 1; i >= 0; i--)
            {
                if (ComponentDefenition.TimingEvents.FindObject(TimingEventsList[i].DefenitionGuid) == null)
                {
                    TimingEventsList.RemoveAt(i);
                }
            }

            /* Add new */
            foreach (TimingEvent timingEventDefinition in ComponentDefenition.TimingEvents)
            {
                if (this.TimingEventsList.FindEvent(timingEventDefinition.GUID) == null)
                {
                    /* Create new runnable instance */
                    AutosarEventInstance newEventInstance = ComponentFabric.GetInstance().CreateEventInstance(timingEventDefinition);
                    this.TimingEventsList.Add(newEventInstance);
                }
            }
        }

        
        public void SyncronizeOneTimeEventsWithDefenition()
        {
            /* TimingEvents */

            /* Delete non existing */
            for (int i = this.OneTimeEventsList.Count - 1; i >= 0; i--)
            {
                if (ComponentDefenition.OneTimeEvents.FindObject(OneTimeEventsList[i].DefenitionGuid) == null)
                {
                    OneTimeEventsList.RemoveAt(i);
                }
            }

            /* Add new */
            foreach (OneTimeEvent eventDefinition in ComponentDefenition.OneTimeEvents)
            {
                if (this.OneTimeEventsList.FindEvent(eventDefinition.GUID) == null)
                {
                    /* Create new runnable instance */
                    AutosarEventInstance newEventInstance = ComponentFabric.GetInstance().CreateEventInstance(eventDefinition);
                    this.OneTimeEventsList.Add(newEventInstance);
                }
            }
        }

        public void SyncronizeAsyncClientServerEventsWithDefenition()
        {
            /* TimingEvents */

            /* Delete non existing */
            for (int i = this.AsyncClientServerEventsInstancesList.Count - 1; i >= 0; i--)
            {
                if (ComponentDefenition.AsyncClientServerEvents.FindObject(AsyncClientServerEventsInstancesList[i].DefenitionGuid) == null)
                {
                    AsyncClientServerEventsInstancesList.RemoveAt(i);
                }
            }

            /* Add new */
            foreach (ClientServerEvent asyncEventDefinition in ComponentDefenition.AsyncClientServerEvents)
            {
                if (this.AsyncClientServerEventsInstancesList.FindEvent(asyncEventDefinition.GUID) == null)
                {
                    /* Create new runnable instance */
                    AutosarEventInstance newEventInstance = ComponentFabric.GetInstance().CreateEventInstance(asyncEventDefinition);
                    this.AsyncClientServerEventsInstancesList.Add(newEventInstance);
                }
            }
        }
    }
}
