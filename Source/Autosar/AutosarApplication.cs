///////////////////////////////////////////////////////////
//  AutosarApplication.cs
//  Implementation of the Class AutosarApplication
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:07
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using System.Windows;
using System.Windows.Media.Imaging;
using AutosarGuiEditor.Source.AutosarInterfaces;
using AutosarGuiEditor.Source.DataTypes;
using AutosarGuiEditor.Source.DataTypes.Enum;
using AutosarGuiEditor.Source.Autosar.SystemErrors;
using AutosarGuiEditor.Source.DataTypes.BaseDataType;
using AutosarGuiEditor.Source.DataTypes.ComplexDataType;
using AutosarGuiEditor.Source.AutosarInterfaces.ClientServer;
using AutosarGuiEditor.Source.AutosarInterfaces.SenderReceiver;
using AutosarGuiEditor.Source.SystemInterfaces;
using AutosarGuiEditor.Source.PortDefenitions;
using AutosarGuiEditor.Source.Component;
using AutosarGuiEditor.Source.Painters;
using AutosarGuiEditor.Source.Painters.PortsPainters;
using AutosarGuiEditor.Source.Painters.Components.Runables;
using AutosarGuiEditor.Source.Painters.Components.PerInstance;
using AutosarGuiEditor.Source.Component.PerInstanceMemory;
using AutosarGuiEditor.Source.Fabrics;
using AutosarGuiEditor.Source.Autosar.OsTasks;
using AutosarGuiEditor.Source.Component.CData;
using AutosarGuiEditor.Source.Composition;
using AutosarGuiEditor.Source.Render;
using AutosarGuiEditor.Source.DataTypes.ArrayDataType;
using AutosarGuiEditor.Source;
using AutosarGuiEditor.Source.Autosar.Events;


namespace System 
{
    public class AutosarApplication
    {
        private ArrayDataTypesList arrayDataTypes = new ArrayDataTypesList();
        public ArrayDataTypesList ArrayDataTypes
        {
            get
            {
                return arrayDataTypes;
            }
        }

        private ComplexDataTypesList complexDataTypes = new ComplexDataTypesList();
        public ComplexDataTypesList ComplexDataTypes
        {
            get
            {
                return complexDataTypes;
            }
        }

        private SimpleDataTypesList simpleDataTypes = new SimpleDataTypesList();
        public SimpleDataTypesList SimpleDataTypes
        {
            get
            {
                return simpleDataTypes;
            }
        }

        private CompositionInstancesList compositions = new CompositionInstancesList();
        public CompositionInstancesList Compositions
        {
            get
            {
                return compositions;
            }
        }

        private ComponentDefenitionList componentDefenitionsList = new ComponentDefenitionList();
        public ComponentDefenitionList ComponentDefenitionsList
        {
            get
            {
                return componentDefenitionsList;
            }
        }


        private OsTasksList osTasks = new OsTasksList();
        public OsTasksList OsTasks
        {
            get
            {
                return osTasks;
            }
        }

        private EnumsList enums = new EnumsList();
        public EnumsList Enums
        {
            get
            {
                return enums;
            }
        }

        private SystemErrorsList systemErrors = new SystemErrorsList();
        public SystemErrorsList SystemErrors
        {
            get 
            {
                return systemErrors;
            }
        }

        private SenderReceiverInterfacesList senderReceiverInterfaces = new SenderReceiverInterfacesList();
        public SenderReceiverInterfacesList SenderReceiverInterfaces
        {
            get 
            {
                return senderReceiverInterfaces;
            }
        }

        private ClientServerInterfacesList clientServerInterfaces = new ClientServerInterfacesList();
        public ClientServerInterfacesList ClientServerInterfaces
        {
            get 
            {
                return clientServerInterfaces;
            }
        }

        private BaseDataTypesList baseDataTypes = new BaseDataTypesList();
        public BaseDataTypesList BaseDataTypes
        {
            get 
            {
                return baseDataTypes;
            }
        }

        CMCUType mcuType = new CMCUType();
        public CMCUType MCUType
        {
            get
            {
                return mcuType;
            }
        }

        public uint SystickFrequencyHz = 1000;
        public String GenerateRtePath = "";
        public String GenerateTestRtePath = "";
        public String GenerateComponentsPath = "";
        public String Signature = "";

        public int DefaultComponentFontSize = 12;
        public int DefaultPortsFontSize = 12;
        public PortableFontDesc ComponentNameFont = new PortableFontDesc(isbold: true);
        public PortableFontDesc PortsNamesFont;
        public PortableFontDesc ComponentDefinitionNameFont;
       
        public String FileName;

        public CompositionInstance ActiveComposition;

        private AutosarApplication()
        {
            BaseDataTypes.CheckBaseDataTypes();
        }

        private static AutosarApplication app = null;
        public static AutosarApplication GetInstance()
        {
            if (app == null)
            {
                app = new AutosarApplication();
            }
            return app;
        }



        public void UnselectComponents()
        {
            foreach (CompositionInstance composition in Compositions)
            {
                composition.ComponentInstances.Unselect();
                composition.Connections.Unselect();
                composition.Unselect();
            }            
        }

        ~AutosarApplication()
        {

        }

        const string ProjectPropertiesXmlField = "Properties";
        const string SystickFrequencyProperty = "SysTickFrequency";
        const string RteGeneratePathProperty = "RteGeneratedPath";
        const string TestRteGeneratePathProperty = "TestRteGeneratedPath";
        const string RteGenerateComponentPathProperty = "RteComponentPathProperty";
        const string ProjectSignatureProperty = "ProjectSignature";

        public bool LoadFromFile(string filename)
        {
            if (File.Exists(filename))
            {
                Clear();
                XElement xroot = XElement.Load(filename);
                XElement xmlApp = xroot.Element("AUTOSARTAPP");
                BaseDataTypes.Clear();

                LoadProperties(xroot);
                Enums.LoadFromXML(xroot);
                systemErrors.LoadFromXML(xroot);
                BaseDataTypes.LoadFromXML(xroot);
                SimpleDataTypes.LoadFromXML(xroot);
                ComplexDataTypes.LoadFromXML(xroot);
                SenderReceiverInterfaces.LoadFromXML(xroot);
                ClientServerInterfaces.LoadFromXML(xroot);
                ComponentDefenitionsList.LoadFromXML(xroot);
                Compositions.LoadFromXML(xroot);
                OsTasks.LoadFromXML(xroot);
                arrayDataTypes.LoadFromXML(xroot);
                MCUType.LoadFromXML(xroot);
                BaseDataTypes.CheckBaseDataTypes();
                SyncronizeRunnables(null, true);
                UpdateConnections();

                FileName = filename;
                return true;
            }
            else
            {
                return false;
            }
        }

        public void UpdateConnections()
        {
            foreach (CompositionInstance composition in compositions)
            {
                composition.UpdateConnections();                
            }
        }

        public void LoadProperties(XElement root)
        {
            XElement properties = root.Element(ProjectPropertiesXmlField);
            GenerateRtePath = properties.Element(RteGeneratePathProperty).Value;
            
            if (properties.Element(RteGenerateComponentPathProperty) != null)
            {
                GenerateComponentsPath = properties.Element(RteGenerateComponentPathProperty).Value;
            }

            if (properties.Element(TestRteGeneratePathProperty) != null)
            {
                GenerateTestRtePath = properties.Element(TestRteGeneratePathProperty).Value;
            }

            if (properties.Element(ProjectSignatureProperty) != null)
            {
                Signature = properties.Element(ProjectSignatureProperty).Value;
            }
            
            uint freq;
            if (uint.TryParse(properties.Element(SystickFrequencyProperty).Value, out freq))
            {
                SystickFrequencyHz = freq;
            }
            else
            {
                SystickFrequencyHz = 1000;
            }
        }

        public void SaveProperties(XElement root)
        {
            XElement properties = new XElement(ProjectPropertiesXmlField);

            XElement frequencyProp = new XElement(SystickFrequencyProperty);
            frequencyProp.Value = SystickFrequencyHz.ToString();

            XElement rtePath = new XElement(RteGeneratePathProperty);
            rtePath.Value = GenerateRtePath;

            XElement testRtePath = new XElement(TestRteGeneratePathProperty);
            testRtePath.Value = GenerateTestRtePath;

            XElement ComponentPath = new XElement(RteGenerateComponentPathProperty);
            ComponentPath.Value = GenerateComponentsPath;

            XElement SignatureElem = new XElement(ProjectSignatureProperty);
            SignatureElem.Value = Signature;

            properties.Add(frequencyProp);
            properties.Add(ComponentPath);
            properties.Add(rtePath);
            properties.Add(testRtePath);
            properties.Add(SignatureElem);

            root.Add(properties);
        }

        void CleanProperties()
        {
            GenerateRtePath = "";
            GenerateComponentsPath = "";
            SystickFrequencyHz = 1000;
            Signature = "";
        }

        public bool SaveToFile(string filename)
        {
            XDocument xdoc = new XDocument();
            XElement root = new XElement("AUTOSARTAPP");
            xdoc.Add(root);
            SaveProperties(root);
            BaseDataTypes.WriteToXML(root);
            SimpleDataTypes.WriteToXML(root);
            arrayDataTypes.WriteToXML(root);
            ComplexDataTypes.WriteToXML(root);            
            SenderReceiverInterfaces.WriteToXML(root);
            ClientServerInterfaces.WriteToXML(root);
            ComponentDefenitionsList.WriteToXML(root);
            Enums.WriteToXML(root);
            systemErrors.WriteToXML(root);
            OsTasks.WriteToXML(root);
            Compositions.WriteToXML(root);
            MCUType.WriteToXML(root);
            xdoc.Save(filename);
            FileName = filename;
            return true;
        }


        public int WriteToXML(XElement xml)
        {
            return 0;
        }

        public void Clear()
        {
            SimpleDataTypes.Clear();
            ComplexDataTypes.Clear();
            ClientServerInterfaces.Clear();
            SenderReceiverInterfaces.Clear();
            Compositions.ClearCompositions();
            ComponentDefenitionsList.Clear();
            Enums.Clear();
            systemErrors.Clear();
            BaseDataTypes.Clear();
            OsTasks.Clear();
            arrayDataTypes.Clear();
            FileName = "";
            CleanProperties();
        }

        public void Render()
        {

        }

        public void CreateNewProject()
        {
            CompositionInstance mainComposition = new CompositionInstance();
            mainComposition.Name = CompositionInstancesList.MainCompositionName;
            ActiveComposition = mainComposition;
            compositions.Add(mainComposition);
            BaseDataTypes.CheckBaseDataTypes();
        }

        public List<IGUID> GetAllDataTypes(string exception = "")
        {
            List<IGUID> datatypes = new List<IGUID>();

            datatypes.AddRange(BaseDataTypes);

            foreach (SimpleDataType simple in SimpleDataTypes)
            {
                if (!simple.Equals(exception))
                {
                    datatypes.Add(simple);
                }
            }

            foreach (ComplexDataType complex in ComplexDataTypes)
            {
                if (!complex.Name.Equals(exception))
                {
                    datatypes.Add(complex);
                }
            }

            foreach (EnumDataType enumer in Enums)
            {
                if (!enumer.Name.Equals(exception))
                {
                    datatypes.Add(enumer);
                }
            }

            foreach (ArrayDataType arrayDt in ArrayDataTypes)
            {
                if (!arrayDt.Name.Equals(exception))
                {
                    datatypes.Add(arrayDt);
                }
            }

            return datatypes;
        }


        public void UpdateFontAccordingScale(double newScale)
        {
            double componentsFontNewSize = DefaultComponentFontSize * newScale;
            if ((int)componentsFontNewSize == 0)
            {
                componentsFontNewSize = 1;
            }

            int compDefFontSize = (int)(componentsFontNewSize - 2);
            if (compDefFontSize < 1)
            {
                compDefFontSize = 1;
            }
            ComponentNameFont = new PortableFontDesc(isbold: true, emsize: (int)componentsFontNewSize);
            PortsNamesFont = new PortableFontDesc(isbold: true, emsize: (int)componentsFontNewSize);
            ComponentDefinitionNameFont = new PortableFontDesc(isbold: false, emsize: compDefFontSize);

        }

        public void DeleteConnection(PortConnection portConnectionPainter)
        {

            foreach (CompositionInstance composition in Compositions)
            {
                composition.Connections.Remove(portConnectionPainter);
            }
        }

        public void DeletePort(PortPainter portPainter)
        {
            if (portPainter == null)
                return;

            foreach (CompositionInstance composition in Compositions)
            {
                List<PortConnection> connectionPainters = composition.Connections.FindConnections(portPainter);
                if (connectionPainters.Count > 0)
                {
                    foreach (PortConnection connection in connectionPainters)
                    {
                        composition.Connections.Remove(connection);
                    }
                }
            }

            IElementWithPorts componentPainter = FindComponentInstanceByPortGuid(portPainter.GUID);
            if (componentPainter != null)
            {
                componentPainter.Ports.Remove(portPainter);
            }
        }

        public void Delete(ComponentInstance componentPainter)
        {
            for (int i = componentPainter.Ports.Count - 1; i >= 0; i--)
            {
                DeletePort(componentPainter.Ports[i]);
            }

            foreach (CompositionInstance composition in Compositions)
            {
                if (composition.ComponentInstances.IndexOf(componentPainter) >= 0)
                {
                    composition.ComponentInstances.Remove(componentPainter);
                }
            }
        }

        public void Delete(CompositionInstance composition)
        {
            if (!composition.Name.Equals(CompositionInstancesList.MainCompositionName))
            {
                /* Delete all connections to the composition */
                PortsConnectionsList connections = composition.GetConnections();
                foreach(PortConnection connection in connections)
                {
                    Delete(connection);
                }
                compositions.Remove(composition);
            }
        }

        public void Delete(PortConnection connection)
        {
           foreach (CompositionInstance composition in Compositions)
           {
               composition.Connections.Remove(connection);
           }
        }

        /* Delete component defenition and its instances */
        public void Delete(ApplicationSwComponentType componentDefenition)
        {
            /* Find Object instances */
            foreach (CompositionInstance composition in Compositions)
            {
                for (int i = composition.ComponentInstances.Count - 1; i >= 0; i--)
                {
                    ComponentInstance compInstance = composition.ComponentInstances[i];
                    if (compInstance.ComponentDefenition.Equals(componentDefenition))
                    {
                        Delete(compInstance);
                    }
                }
            }

            ComponentDefenitionsList.Remove(componentDefenition);
        }

        public void UpdatePortsInComponentInstances()
        {
            /* Remove unexists port in defenition */
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    ApplicationSwComponentType compDefenition = compInstance.ComponentDefenition;
                    for (int i = compInstance.Ports.Count - 1; i >= 0; i--)
                    {
                        PortPainter portPainter = compInstance.Ports[i];
                        PortDefenition portDefenition = compDefenition.Ports.FindObject(portPainter.PortDefenitionGuid);
                        if (portDefenition == null)
                        {
                            DeletePort(portPainter);
                        }
                    }
                }
            }

            /* Add new or missing ports */
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    ApplicationSwComponentType compDefenition = compInstance.ComponentDefenition;
                    foreach (PortDefenition portDef in compDefenition.Ports)
                    {
                        bool find = false;
                        foreach (PortPainter portPainter in compInstance.Ports)
                        {
                            if (portPainter.PortDefenition.Equals(portDef))
                            {
                                find = true;
                                break;
                            }
                        }
                        if (!find)
                        {
                            double x = compInstance.Painter.Left - PortPainter.DefaultWidth / 2.0;
                            double y = (compInstance.Painter.Top + compInstance.Painter.Bottom) / 2;

                            PortPainter portPainter = ComponentFabric.GetInstance().CreatePortPainter(portDef, x, y);
                            compInstance.Ports.Add(portPainter);
                        }
                    }
                }
            }
        }


        public void UpdateTimingEventsInComponentInstances()
        {
            throw new NotImplementedException();

            /* Remove unexists port in defenition */
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    ApplicationSwComponentType compDefenition = compInstance.ComponentDefenition;
                    for (int i = compInstance.Ports.Count - 1; i >= 0; i--)
                    {
                        PortPainter portPainter = compInstance.Ports[i];
                        PortDefenition portDefenition = compDefenition.Ports.FindObject(portPainter.PortDefenitionGuid);
                        if (portDefenition == null)
                        {
                            DeletePort(portPainter);
                        }
                    }
                }
            }

            /* Add new or missing ports */
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    ApplicationSwComponentType compDefenition = compInstance.ComponentDefenition;
                    foreach (PortDefenition portDef in compDefenition.Ports)
                    {
                        bool find = false;
                        foreach (PortPainter portPainter in compInstance.Ports)
                        {
                            if (portPainter.PortDefenition.Equals(portDef))
                            {
                                find = true;
                                break;
                            }
                        }
                        if (!find)
                        {
                            double x = compInstance.Painter.Left - PortPainter.DefaultWidth / 2.0;
                            double y = (compInstance.Painter.Top + compInstance.Painter.Bottom) / 2;

                            PortPainter portPainter = ComponentFabric.GetInstance().CreatePortPainter(portDef, x, y);
                            compInstance.Ports.Add(portPainter);
                        }
                    }
                }
            }
        }

        public bool isComplexDataTypeUsed(ComplexDataType datatype)
        {
            return false;
        }


        public bool Delete(ComplexDataType complexDataType)
        {
            if (isComplexDataTypeUsed(complexDataType) == false)
            {
                ComplexDataTypes.Remove(complexDataType);
                return true;
            }
            else
            {
                /* datatype is used and we cannot delete it */
                return false;
            }
        }

        public bool isEnumDataTypeUsed(EnumDataType datatype)
        {
            return false;
        }


        public bool Delete(EnumDataType enumDataType)
        {
            if (isEnumDataTypeUsed(enumDataType) == false)
            {
                Enums.Remove(enumDataType);
                return true;
            }
            else
            {
                /* datatype is used and we cannot delete it */
                return false;
            }
        }

        public bool Delete(ArrayDataType arrayDataType)
        {
            arrayDataTypes.Remove(arrayDataType);
            return true;
        }

        public bool isCSenderReceiverInterfaceUsed(SenderReceiverInterface srInterface)
        {
            return false;
        }

        public bool Delete(SenderReceiverInterface srInterface)
        {
            if (isCSenderReceiverInterfaceUsed(srInterface) == false)
            {
                SenderReceiverInterfaces.Remove(srInterface);
                return true;
            }
            else
            {
                /* datatype is used and we cannot delete it */
                return false;
            }
        }


        public bool isSimpleDataTypeUsed(SimpleDataType datatype)
        {
            return false;
        }

        public bool Delete(SimpleDataType datatype)
        {
            if (isSimpleDataTypeUsed(datatype) == false)
            {
                SimpleDataTypes.Remove(datatype);
                return true;
            }
            else
            {
                /* datatype is used and we cannot delete it */
                return false;
            }
        }

        public bool isClientServerInterfaceUsed(ClientServerInterface datatype)
        {
            return false;
        }

        public bool Delete(ClientServerInterface datatype)
        {
            if (isClientServerInterfaceUsed(datatype) == false)
            {
                ClientServerInterfaces.Remove(datatype);
                return true;
            }
            else
            {
                /* datatype is used and we cannot delete it */
                return false;
            }
        }

        public List<IGUID> GetAllClientServerInterfacesNames()
        {
            List<IGUID> names = new List<IGUID>();
            foreach (ClientServerInterface csInterface in ClientServerInterfaces)
            {
                names.Add(csInterface);
            }
            return names;
        }

        public List<IGUID> GetAllSenderReceiverInterfacesNames()
        {
            List<IGUID> names = new List<IGUID>();
            foreach (SenderReceiverInterface srInterface in SenderReceiverInterfaces)
            {
                names.Add(srInterface);
            }
            return names;
        }

        public RunnableInstancesList GetAllRunnableInstances()
        {
            RunnableInstancesList runnables = new RunnableInstancesList();
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance component in composition.ComponentInstances)
                {
                    runnables.AddRange(component.RunableInstances);
                }
            }
            return runnables;
        }

        public RunnableInstance GetRunnableInstance(Guid GUID)
        {
            RunnableInstancesList allRunnables = GetAllRunnableInstances();
            foreach (RunnableInstance runnable in allRunnables)
            {
                if (runnable.GUID.Equals(GUID))
                {
                    return runnable;
                }
            }
            return null;
        }

        public RunnableInstancesList GetAllUnnassignedRunnables()
        {
            RunnableInstancesList list = new RunnableInstancesList();
            RunnableInstancesList allRunnables = GetAllRunnableInstances();
            foreach (RunnableInstance runnable in allRunnables)
            {
                if (GetRunnableTask(runnable) == null)
                {
                    list.Add(runnable);
                }
            }
            
            return list;
        }

        public OsTask GetRunnableTask(RunnableInstance runnableInstance)
        {
            foreach (OsTask task in this.OsTasks)
            {
                if (task.Runnables.FindObject(runnableInstance.GUID) != null)
                {
                    return task;
                }
            }
            return null;
        }


        public RunnableInstancesList GetAllRunnablesOrderedByStartup()
        {
            RunnableInstancesList allrunnables = GetAllRunnableInstances();
            List<RunnableInstance> orderedRunnables = allrunnables.OrderBy(Obj => Obj.StartupOrder).ToList();
            allrunnables.Clear();
            allrunnables.AddRange(orderedRunnables);
            return allrunnables;
        }


        public IGUID GetDataType(Guid GUID)
        {
            BaseDataType baseDatatype = BaseDataTypes.FindObject(GUID);
            if (baseDatatype != null)
            {
                return baseDatatype;
            }

            SimpleDataType simpleDataType = SimpleDataTypes.FindObject(GUID);
            if (simpleDataType != null)
            {
                return simpleDataType;
            }

            ComplexDataType complexDataType = ComplexDataTypes.FindObject(GUID);
            if (complexDataType != null)
            {
                return complexDataType;
            }

            EnumDataType enumDataType = Enums.FindObject(GUID);
            if (enumDataType != null)
            {
                return enumDataType;
            }

            ArrayDataType arrayDataType = ArrayDataTypes.FindObject(GUID);
            if (arrayDataType != null)
            {
                return arrayDataType;
            }

            return null;
        }

        public bool IsDataTypeComlex(Guid GUID)
        {
            //BaseDataType baseDatatype = BaseDataTypes.FindObject(GUID);
            //if (baseDatatype != null)
            //{
            //    return false;
            //}

            //SimpleDataType simpleDataType = SimpleDataTypes.FindObject(GUID);
            //if (simpleDataType != null)
            //{
            //    return false;
            //}

            ComplexDataType complexDataType = ComplexDataTypes.FindObject(GUID);
            if (complexDataType != null)
            {
                return true;
            }

            //EnumDataType enumDataType = Enums.FindObject(GUID);
            //if (enumDataType != null)
            //{
            //    return false;
            //}

            return false;
        }

        public const String ErrorDataType = "ERROR";

        public String GetDataTypeName(Guid GUID)
        {
            ArrayDataType arrayDatatype = ArrayDataTypes.FindObject(GUID);
            if (arrayDatatype != null)
            {
                return arrayDatatype.Name;
            }

            BaseDataType baseDatatype = BaseDataTypes.FindObject(GUID);
            if (baseDatatype != null)
            {
                return baseDatatype.Name;
            }

            SimpleDataType simpleDataType = SimpleDataTypes.FindObject(GUID);
            if (simpleDataType != null)
            {
                return simpleDataType.Name;
            }

            ComplexDataType complexDataType = ComplexDataTypes.FindObject(GUID);
            if (complexDataType != null)
            {
                return complexDataType.Name;
            }

            EnumDataType enumDataType = Enums.FindObject(GUID);
            if (enumDataType != null)
            {
                return enumDataType.Name;
            }

            return ErrorDataType;
        }

        

        public PortDefenition GetPortDefenition(Guid GUID)
        {
            foreach (ApplicationSwComponentType componentDef in ComponentDefenitionsList)
            {
                foreach (PortDefenition portDef in componentDef.Ports)
                {
                    if (portDef.GUID.Equals(GUID))
                    {
                        return portDef;
                    }
                }
            }

            foreach (CompositionInstance composition in compositions)
            {
                foreach (PortDefenition portDef in composition.PortsDefenitions)
                {
                    if (portDef.GUID.Equals(GUID))
                    {
                        return portDef;
                    }
                }
            }
            return null;
        }

        public ComponentInstance GetComponentInstance(Guid GUID)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance componentInstance in composition.ComponentInstances)
                {
                    if (componentInstance.GUID.Equals(GUID))
                    {
                        return componentInstance;
                    }
                }
            }
            return null;
        }

        public ComponentInstancesList GetComponentInstanceByDefenition(ApplicationSwComponentType compDef)
        {
            ComponentInstancesList list = new ComponentInstancesList();
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance componentInstance in composition.ComponentInstances)
                {
                    if (componentInstance.ComponentDefenitionGuid.Equals(compDef.GUID))
                    {
                        list.Add(componentInstance);
                    }
                }
            }
            return list;
        }

        public void UpdateNamesOfConnectionLines()
        {
            foreach(CompositionInstance composition in compositions)
            {
                foreach(PortConnection connection in composition.Connections)
                {
                    connection.UpdateName();
                }
            }
        }

        public PortsConnectionsList GetPortConnections(PortPainter portPainter)
        {
            PortsConnectionsList portConnection = new PortsConnectionsList();
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (PortConnection connection in composition.Connections)
                {
                    if (connection.PortPainter1Guid.Equals(portPainter.GUID) || connection.PortPainter2Guid.Equals(portPainter.GUID))
                    {
                        portConnection.Add(connection);
                    }
                }
            }
            return portConnection;
        }

        public void GetOppositeComponentPorts(PortPainter portPainter, List<PortPainter> oppositePorts)
        {
            PortPainter oppositePort;

            PortsConnectionsList portConnections = GetPortConnections(portPainter);
            foreach (PortConnection portConnection in portConnections)
            {
                oppositePort = portConnection.GetOppositePort(portPainter);
                if (oppositePort != null)
                {
                    IElementWithPorts elem = FindComponentInstanceByPort(oppositePort);

                    if (elem is ComponentInstance)
                    {
                        oppositePorts.Add(oppositePort);
                    }
                    /* the port belongs to the composition */
                    else if (elem is CompositionInstance)
                    {
                        CompositionInstance composition = elem as CompositionInstance;
                        PortPainter middlePort;
                        /* Is it composition's external port?*/
                        int externalPortIndex = composition.Ports.IndexOf(oppositePort);
                        if (externalPortIndex >= 0)
                        {
                            /* get internal index */
                            middlePort = composition.InternalPortsInstances[externalPortIndex];
                        }
                        else /* It was internal port */
                        {
                            /* get external port */
                            int internalPortIndex = composition.InternalPortsInstances.IndexOf(oppositePort);
                            middlePort = composition.Ports[internalPortIndex];
                        }

                        /* Get middle port connections */
                        PortsConnectionsList compositionPortConnections = GetPortConnections(middlePort);
                        foreach(PortConnection compositeConnection in compositionPortConnections)
                        {
                            GetOppositeComponentPorts(middlePort, oppositePorts);
                        }                        
                    }
                }
            }
        }


        public void GetOppositePortAndComponent(PortPainter portPainter, out ComponentInstance oppositeComponent, out PortPainter oppositePort)
        {
            oppositeComponent = null;
            oppositePort = null;

            if (portPainter.PortDefenition.InterfaceName == "isrDesiredForce")
            {

            }

            PortsConnectionsList portConnections = GetPortConnections(portPainter);
            if (portConnections.Count != 0)
            {
                
                oppositePort = portConnections[0].GetOppositePort(portPainter);
                if (oppositePort != null)
                {
                    IElementWithPorts elem = FindComponentInstanceByPort(oppositePort);
                    if (elem is ComponentInstance) 
                    {
                        /* No problem just return the component*/
                        oppositeComponent = elem as ComponentInstance;
                    }
                    /* the port belongs to the composition */
                    else if (elem is CompositionInstance) 
                    {
                        CompositionInstance composition = elem as CompositionInstance;
                        PortPainter middlePort;
                        /* Is it composition's external port?*/
                        int externalPortIndex = composition.Ports.IndexOf(oppositePort);
                        if (externalPortIndex >= 0)
                        {
                            /* get internal index */
                            middlePort = composition.InternalPortsInstances[externalPortIndex];
                        }
                        else /* It was internal port */
                        {
                            /* get external port */
                            int internalPortIndex = composition.InternalPortsInstances.IndexOf(oppositePort);
                            middlePort = composition.Ports[internalPortIndex];
                        }

                        /* Get middle port connections */
                        portConnections = GetPortConnections(middlePort);
                        if (portConnections.Count > 0)
                        {
                            PortConnection connection = portConnections[0];
                            oppositePort = connection.GetOppositePort(middlePort);
                            Object oppositeObject = FindComponentInstanceByPort(oppositePort);
                            
                            /* Check if another port belongs to composition */
                            if (oppositeObject is CompositionInstance)
                            {
                                CompositionInstance oppositeComposition = oppositeObject as CompositionInstance;
                                PortPainter middlePort2;

                                int externalPortIndex2 = oppositeComposition.Ports.IndexOf(oppositePort);

                                /* get internal index */
                                middlePort2 = oppositeComposition.InternalPortsInstances[externalPortIndex2];

                                /* Get middle port connections */
                                PortsConnectionsList portConnections2 = GetPortConnections(middlePort2);
                                if (portConnections2.Count > 0)
                                {
                                    PortConnection connection3 = portConnections2[0];
                                    oppositePort = connection3.GetOppositePort(middlePort2);
                                    oppositeComponent = FindComponentInstanceByPort(oppositePort) as ComponentInstance;
                                }
                            }
                            else
                            {
                                oppositeComponent = oppositeObject as ComponentInstance;
                            }
                        }
                    }
                }
            }
        }

        public List<PortConnection> GetComponentConnections(object obj)
        {
            List<PortConnection> connections = new List<PortConnection>();
            if (obj is ComponentInstance)
            {
                ComponentInstance compInstance = (ComponentInstance)obj;
                foreach (CompositionInstance composition in Compositions)
                {
                    foreach (PortConnection connection in composition.Connections)
                    {
                        if ((compInstance.Ports.IndexOf(connection.Port1) != -1) || (compInstance.Ports.IndexOf(connection.Port2) != -1))
                        {
                            connections.Add(connection);
                        }
                    }
                }
            }
            else if (obj is CompositionInstance)
            {
                CompositionInstance composition = (CompositionInstance)obj;
                if (!composition.Name.Equals(CompositionInstancesList.MainCompositionName))
                {
                    CompositionInstance mainComposition = compositions.GetMainComposition();
                    if (mainComposition != null)
                    {
                        foreach (PortConnection connection in mainComposition.Connections)
                        {
                            if ((composition.Ports.IndexOf(connection.Port1) != -1) || (composition.Ports.IndexOf(connection.Port2) != -1))
                            {
                                connections.Add(connection);
                            }
                        }
                    }
                    else
                    {
                        throw new Exception("There is no main composition!");
                    }
                }
            }
            return connections;            
        }


        public RunnableDefenition FindRunnableDefenition(Guid runnableDefGuid)
        {
            RunnableDefenition runableDef = null;
            foreach (ApplicationSwComponentType compDef in this.ComponentDefenitionsList)
            {
                runableDef = compDef.Runnables.FindObject(runnableDefGuid);
                if (runableDef != null)
                {
                    return runableDef;
                }
            }
            return null;
        }

        public AutosarEvent FindEventDefenition(Guid eventDefGuid)
        {
            AutosarEvent eventDef = null;
            foreach (ApplicationSwComponentType compDef in this.ComponentDefenitionsList)
            {
                eventDef = compDef.TimingEvents.FindObject(eventDefGuid);
                if (eventDef != null)
                {
                    return eventDef;
                }
            }

            foreach (ApplicationSwComponentType compDef in this.ComponentDefenitionsList)
            {
                eventDef = compDef.ServerCallEvents.FindObject(eventDefGuid);
                if (eventDef != null)
                {
                    return eventDef;
                }
            }
            return null;
        }

        public ComponentInstance FindComponentInstanceByRunnableGuid(Guid runnableGuid)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (compInstance.RunableInstances.FindObject(runnableGuid) != null)
                    {
                        return compInstance;
                    }
                }
            }
            return null;
        }

        public PortPainter FindPort(Guid portGuid)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    PortPainter portPainter = compInstance.Ports.FindObject(portGuid);
                    if (portPainter != null)
                    {
                        return portPainter;
                    }
                }

                PortPainter externalPortPainter = composition.Ports.FindObject(portGuid);
                if (externalPortPainter != null)
                {
                    return externalPortPainter;
                }

                PortPainter internalPortPainter = composition.InternalPortsInstances.FindObject(portGuid);
                if (internalPortPainter != null)
                {
                    return internalPortPainter;
                }
            }
            
            return null;
        }
       

        public PortDefenition FindPortDefenition(Guid portDefenitionGuid)
        {
            /* Check component's ports */
            foreach (ApplicationSwComponentType compDef in this.ComponentDefenitionsList)
            {
                PortDefenition portDefenition = compDef.Ports.FindObject(portDefenitionGuid);
                if (portDefenition != null)
                {
                    return portDefenition;
                }
            }

            /* Check composition's ports */
            foreach(CompositionInstance composition in this.compositions)
            {
                PortDefenition portDefenition = composition.PortsDefenitions.FindObject(portDefenitionGuid);
                if (portDefenition != null)
                {
                    return portDefenition;
                }
            }

            return null;
        }

        public PortDefenition FindPortDefenition(PortPainter portPainter)
        {
            return FindPortDefenition(portPainter.PortDefenitionGuid);
        }

        public IElementWithPorts FindComponentInstanceByPortGuid(Guid portGuid)
        {            
            foreach (CompositionInstance composition in Compositions)
            {
                /* Check ports in all components inside the composition */
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (compInstance.Ports.FindObject(portGuid) != null)
                    {
                        return compInstance;
                    }
                }
                
                /* Check composition's internal ports */
                foreach (PortPainter portPainter in composition.InternalPortsInstances)
                {
                    if (portPainter.GUID.Equals(portGuid))
                    {
                        return composition;
                    }
                }

                /* Check composition's external ports */
                foreach (PortPainter portPainter in composition.Ports)
                {
                    if (portPainter.GUID.Equals(portGuid))
                    {
                        return composition;
                    }
                }
            }
            return null;
        }

        public PimDefenition FindPimDefenition(Guid defGuid)
        {
            foreach (ApplicationSwComponentType compInstance in this.ComponentDefenitionsList)
            {
                PimDefenition pimDef = compInstance.PerInstanceMemoryList.FindObject(defGuid);
                if (pimDef != null)
                {
                    return pimDef;
                }
            }
            return null;
        }

        public CDataDefenition FindCDataDefenition(Guid defGuid)
        {
            foreach (ApplicationSwComponentType compInstance in this.ComponentDefenitionsList)
            {
                CDataDefenition def = compInstance.CDataDefenitions.FindObject(defGuid);
                if (def != null)
                {
                    return def;
                }
            }
            return null;
        }

        public ApplicationSwComponentType FindComponentDefenitionByRunnnableGuid(Guid runnableDefenitionGuid)
        {
            foreach (ApplicationSwComponentType compDefenition in this.ComponentDefenitionsList)
            {
                if (compDefenition.Runnables.FindObject(runnableDefenitionGuid) != null)
                {
                    return compDefenition;
                }
            }
            return null;
        }

        public ApplicationSwComponentType FindComponentDefenitionByGuid(Guid componentDefenitionGuid)
        {
            return ComponentDefenitionsList.FindObject(componentDefenitionGuid);            
        }

        public ApplicationSwComponentType FindComponentDefenitionByPortGuid(Guid portDefenitionGuid)
        {
            foreach (ApplicationSwComponentType compDefenition in this.ComponentDefenitionsList)
            {
                if (compDefenition.Ports.FindObject(portDefenitionGuid) != null)
                {
                    return compDefenition;
                }
            }
            return null;
        }

        public ApplicationSwComponentType FindComponentDefenitionByPort(PortDefenition portDefenition)
        {
            return FindComponentDefenitionByPortGuid(portDefenition.GUID);
        }

        public ApplicationSwComponentType FindComponentDefenitionByRunnnable(RunnableDefenition runnableDef)
        {
            return FindComponentDefenitionByRunnnableGuid(runnableDef.GUID);
        }

        public IElementWithPorts FindComponentInstanceByPort(PortPainter portPainter)
        {
            return FindComponentInstanceByPortGuid(portPainter.GUID);            
        }

        /*
        public int GetComponentDefenitionIndex(ComponentInstance instance)
        {
            int index = -1;
            for (int i = 0; i < app.componentInstancesList.Count; i++)
            {
                if (app.componentInstancesList[i].ComponentDefenition.Equals(instance.ComponentDefenition))
                {
                    index++;
                    if (app.componentInstancesList[i].Equals(instance))
                    {
                        return index;
                    }
                }
            }
            return index;
        }
        */

        public int GetComponentDefenitionCount(ApplicationSwComponentType componentDefenition)
        {
            int count = 0;
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (compInstance.ComponentDefenition.Equals(componentDefenition))
                    {
                        count++;
                    }
                }
            }
            return count;
        }

        public void SyncronizePerInstanceMemory(ApplicationSwComponentType compDef, bool useAllDefenition = false)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (useAllDefenition || compInstance.ComponentDefenition.Equals(compDef))
                    {
                        compInstance.UpdatePims();
                    }
                }
            }
        }

        public void SysncronizePimNames(ApplicationSwComponentType compDef, bool useAllDefenition = false)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (useAllDefenition || compInstance.ComponentDefenition.Equals(compDef))
                    {
                        compInstance.UpdatePimNames();
                    }
                }
            }
        }

        public void SysncronizeCDataNames(ApplicationSwComponentType compDef, bool useAllDefenition = false)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (useAllDefenition || compInstance.ComponentDefenition.Equals(compDef))
                    {
                        compInstance.UpdateCDataNames();
                    }
                }
            }
        }

        public void SyncronizeCData(ApplicationSwComponentType compDef, bool useAllDefenition = false)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (useAllDefenition || compInstance.ComponentDefenition.Equals(compDef))
                    {
                        compInstance.UpdateCData();
                    }
                }
            }
        }

        public void SyncronizeRunnables(ApplicationSwComponentType compDef, bool useAllDefenition = false)
        {
            foreach (CompositionInstance composition in Compositions)
            {
                foreach (ComponentInstance compInstance in composition.ComponentInstances)
                {
                    if (useAllDefenition || compInstance.ComponentDefenition.Equals(compDef))
                    {
                        compInstance.SyncronizeRunnablesWithDefenition();
                    }
                }
            }
        }

        public object GetPortInterface(Guid portInterface)
        {
            foreach(ClientServerInterface csInterface in this.clientServerInterfaces)
            {
                if (portInterface.Equals(csInterface.GUID))
                {
                    return csInterface;
                }
            }

            foreach (SenderReceiverInterface srInterface in this.senderReceiverInterfaces)
            {
                if (portInterface.Equals(srInterface.GUID))
                {
                    return srInterface;
                }
            }
            return null;
        }
    }

}