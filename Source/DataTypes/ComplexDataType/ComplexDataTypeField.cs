///////////////////////////////////////////////////////////
//  DataTypeField.cs
//  Implementation of the Class DataTypeField
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:11
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml.Linq;
using AutosarGuiEditor.Source.Utility;
using AutosarGuiEditor.Source.SystemInterfaces;
using System.Xml;

namespace System {

	public class ComplexDataTypeField : IGUID
    {
        public Guid DataTypeGUID { set; get; }
                
        public bool IsPointer { set; get; }
		public ComplexDataTypeField()
        {            
            this.Name = "ComplexDataTypeField";
            this.IsPointer = false;            
            this.GUID = Guid.NewGuid();
		}

        public override void LoadFromXML(XElement xml)
        {
            base.LoadFromXML(xml);

            String dataTypeGuidString = XmlUtilits.GetFieldValue(xml, "DataTypeGUID", "");
            DataTypeGUID = GuidUtils.GetGuid(dataTypeGuidString, false);
            XElement isPointerElem = xml.Element("IsPointer");
            if (isPointerElem != null)
            {
                IsPointer = isPointerElem.Value.Equals("True");
            }
        }

        public override void WriteToXML(XElement xml)
        {
            XElement xmldatatype = new XElement("ComplexDataType");

            base.WriteToXML(xmldatatype);
            xmldatatype.Add(new XElement("DataTypeGUID", DataTypeGUID.ToString("B"))); 
            xmldatatype.Add(new XElement("IsPointer", IsPointer.ToString()));            
            xml.Add(xmldatatype);
        }

        public String DataTypeName
        {
            get
            {
                String dataTypeName = AutosarApplication.GetInstance().GetDataTypeName(DataTypeGUID);
                return dataTypeName;
            }
        }
	}
}