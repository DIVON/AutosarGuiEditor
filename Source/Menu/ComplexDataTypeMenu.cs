///////////////////////////////////////////////////////////
//  ComplexDataTypeMenu.cs
//  Implementation of the Class ComplexDataTypeMenu
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:13
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Controls;
using AutosarGuiEditor.Source.Forms;
using AutosarGuiEditor.Source.Utility;
using AutosarGuiEditor.Source.DataTypes.ComplexDataType;
using AutosarGuiEditor.Source.SystemInterfaces;
using AutosarGuiEditor.Source.Forms.Controls;



namespace System 
{
	public class ComplexDataTypeMenu 
    {
        DataGrid grid;
        AllowUpdater allowUpdater = new AllowUpdater();
        ComplexDataType datatype;
        AutosarTreeViewControl autosarTree;
        TextBox nameTextBox;

		public ComplexDataType DataType
        {
            set
            {
                datatype = value;
                allowUpdater.StopUpdate();
                nameTextBox.Text = datatype.Name;
                RefreshComplexDatatypeGridView();
                allowUpdater.AllowUpdate();
            }
            get
            {
                return datatype;
            }
        }

        public ComplexDataTypeMenu(AutosarTreeViewControl autosarTree, DataGrid grid, TextBox nameTextBox)
        {
            this.grid = grid;
            this.autosarTree = autosarTree;
            this.nameTextBox = nameTextBox;
            nameTextBox.TextChanged += nameTextBox_TextChanged;
		}

        

		~ComplexDataTypeMenu(){

		}

		public void AddField()
        {
            datatype.Fields.Add(new ComplexDataTypeField());
            datatype.Fields.DoSort();
		}		

        public void ChangeDatatypeButtonClick()
        {
            int index = grid.SelectedIndex;

            List<IGUID> datatypes = AutosarApplication.GetInstance().GetAllDataTypes(this.datatype.Name);
            System.Windows.Forms.DialogResult result = DatatypeForm.GetInstance().ShowForm(datatypes, datatype.Fields[index].DataTypeGUID);
            if (result == System.Windows.Forms.DialogResult.OK)
            {
                datatype.Fields[index].DataTypeGUID = DatatypeForm.GetInstance().SelectedDatatype.GUID;
                RefreshComplexDatatypeGridView();
            }
        }

        public void RefreshComplexDatatypeGridView()
        {
            if (allowUpdater.IsUpdateAllowed)
            {
                AutosarApplication.GetInstance().SyncronizePerInstanceMemory(null, true);
            }
            grid.ItemsSource = null;
            grid.ItemsSource = datatype.Fields;
        }

        public void IsPointerCheckBoxClick(CheckBox sender)
        {
            int index = grid.SelectedIndex;
            if ((index < grid.Items.Count) && (index >= 0))
            {
                datatype.Fields[index].IsPointer = (sender.IsChecked == true);
                RefreshComplexDatatypeGridView();
            }
        }

        public void DeleteComplexDatatypeField()
        {
            int index = grid.SelectedIndex;
            if ((index < grid.Items.Count) && (index >= 0))
            {
                datatype.Fields.RemoveAt(index);
                RefreshComplexDatatypeGridView();                
            }
        }

        public void RenameComplexFieldNameTextEdit(TextBox textbox)
        {
            int index = grid.SelectedIndex;
            if ((index < grid.Items.Count) && (index >= 0))
            {
                datatype.Fields[index].Name = textbox.Text;
                AutosarApplication.GetInstance().SyncronizePerInstanceMemory(null, true);
            }
        }


        void nameTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (allowUpdater.IsUpdateAllowed)
            {
                String newName = (sender as TextBox).Text;
                if (NameUtils.CheckComponentName(newName))
                {
                    datatype.Name = newName;
                    AutosarApplication.GetInstance().SyncronizePerInstanceMemory(null, true);
                    autosarTree.UpdateAutosarTreeView(null);
                }
            }
        }
	}
}