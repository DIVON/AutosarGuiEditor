///////////////////////////////////////////////////////////
//  SimpleDataTypeMenu.cs
//  Implementation of the Class SimpleDataTypeMenu
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:12
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using AutosarGuiEditor.Source.DataTypes.BaseDataType;
using AutosarGuiEditor.Source.SystemInterfaces;



namespace System 
{

    public class BaseDataTypeComboBoxItem : ComboBoxItem
    {
        public BaseDataType baseDataType;
    }

	public class SimpleDataTypeMenu {

        SimpleDataType simpleDataType = null;
        AutosarApplication autosarApp;
        TextBox nameTextBox;
        ComboBox baseDataTypeComboBox; 
        TextBox maxValueTextBox;
        TextBox minValueTextBox;

		public SimpleDataType DataType
        {
            set
            {
                UpdateSimpleDataType();
                simpleDataType = value;
                nameTextBox.Text = simpleDataType.Name;
                maxValueTextBox.Text = simpleDataType.MaxValue;
                minValueTextBox.Text = simpleDataType.MinValue;
                foreach (BaseDataTypeComboBoxItem comboItem in baseDataTypeComboBox.Items)
                {
                    if (comboItem.baseDataType.GUID.Equals(simpleDataType.BaseDataTypeGUID))
                    {
                        baseDataTypeComboBox.SelectedItem = comboItem;
                        break;
                    }
                }
            }
            get
            {
                return simpleDataType;
            }
        }

		public SimpleDataTypeMenu(AutosarApplication autosarApp, TextBox nameTextBox, ComboBox baseDataTypeComboBox, 
            TextBox maxValueTextBox, TextBox minValueTextBox, Button applyButton)
        {
            this.autosarApp = autosarApp;
            this.nameTextBox = nameTextBox;
            this.baseDataTypeComboBox = baseDataTypeComboBox;
            this.maxValueTextBox = maxValueTextBox;
            this.minValueTextBox = minValueTextBox;
            applyButton.Click +=applyButton_Click;
            

            baseDataTypeComboBox.SelectedIndex = 0;
		}

        public void UpdateSimpleDataType()
        {
            baseDataTypeComboBox.Items.Clear();
            foreach (BaseDataType baseDataType in autosarApp.BaseDataTypes)
            {
                AddComboboxItem(baseDataType);
            }
        }

        private void AddComboboxItem(BaseDataType datatype)
        {
            BaseDataTypeComboBoxItem comboboxItem = new BaseDataTypeComboBoxItem();
            comboboxItem.Content = datatype.Name;
            comboboxItem.baseDataType = datatype;
            baseDataTypeComboBox.Items.Add(comboboxItem);
        }

        void applyButton_Click(object sender, EventArgs e)
        {
 	        if (simpleDataType == null)
                return;

            Rename(nameTextBox.Text);
            UpdateDatatype((baseDataTypeComboBox.SelectedItem as BaseDataTypeComboBoxItem).baseDataType);
            UpdateMinValue(minValueTextBox.Text);
            UpdateMaxValue(maxValueTextBox.Text);

            /* Refresh */
            SimpleDataType remembered = DataType;
            DataType = remembered;
        }

		private void Rename(string NewName)
        {            
            if (simpleDataType.Name != NewName)
            {
                if (autosarApp.SimpleDataTypes.FindObject(NewName) == null)
                {
                    simpleDataType.Name = NewName;
                }
                else 
                {
                    MessageBox.Show("Simple datatype with the same name exists", "Attention", 
                        System.Windows.MessageBoxButton.OK, 
                        System.Windows.MessageBoxImage.Warning, 
                        System.Windows.MessageBoxResult.OK, 
                        System.Windows.MessageBoxOptions.DefaultDesktopOnly);
                    return;
                }
            }
		}

        public void UpdateDatatype(BaseDataType datatype)
        {
            if (simpleDataType.BaseDataTypeGUID != datatype.GUID)
            {
                simpleDataType.BaseDataTypeGUID = datatype.GUID;
            }
        }

        private void UpdateMinValue(string minValue)
        {            
            String datatypeName = autosarApp.GetDataTypeName(simpleDataType.BaseDataTypeGUID);
            if (datatypeName.Equals("uint8"))
            {
                byte value;
                if (byte.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = "0";
                }
            }
            else if (datatypeName.Equals("uint16"))  
            {
                UInt16 value;
                if (UInt16.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = "0";
                }
            }
            else if (datatypeName.Equals("uint32"))  
            {
                UInt32 value;
                if (UInt32.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = "0";
                }
            }
            else if (datatypeName.Equals("int8"))  
            {
                sbyte value;
                if (sbyte.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = sbyte.MinValue.ToString();
                }
            }
            else if (datatypeName.Equals("int16")) 
            {
                Int16 value;
                if (Int16.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = Int16.MinValue.ToString();
                }
            }
            else if (datatypeName.Equals("int32")) 
            {
                Int32 value;
                if (Int32.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = Int32.MinValue.ToString();
                }
            }
            else if (datatypeName.Equals("float32")) 
            {
                minValue = minValue.Replace(".", ",");
                float value;
                if (float.TryParse(minValue, out value)){
                    this.simpleDataType.MinValue = value.ToString();
                }
                else {
                    this.simpleDataType.MinValue = float.MinValue.ToString();
                }
            }
        }

        private void UpdateMaxValue(string MaxValue)
        {
            String datatypeName = autosarApp.GetDataTypeName(simpleDataType.BaseDataTypeGUID);
            if (datatypeName.Equals("uint8"))
            {
                byte value;
                if (byte.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = byte.MaxValue.ToString();
                }
            }
                
            else if (datatypeName.Equals("uint16"))
            {
                UInt16 value;
                if (UInt16.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = UInt16.MaxValue.ToString();
                }
            }
            else if (datatypeName.Equals("uint32"))
            {
                UInt32 value;
                if (UInt32.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = UInt32.MaxValue.ToString();
                }
            }
            else if (datatypeName.Equals("int8"))
            {
                sbyte value;
                if (sbyte.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = sbyte.MaxValue.ToString();
                }
            }
            else if (datatypeName.Equals("int16"))
            {
                Int16 value;
                if (Int16.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = Int16.MaxValue.ToString();
                }
            }
            else if (datatypeName.Equals("int32"))
            {
                Int32 value;
                if (Int32.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = Int32.MaxValue.ToString();
                }
            }
            else if (datatypeName.Equals("float32"))
            {
                float value;
                MaxValue = MaxValue.Replace(".", ",");
                if (float.TryParse(MaxValue, out value)){
                    this.simpleDataType.MaxValue = value.ToString();
                }
                else {
                    this.simpleDataType.MaxValue = float.MaxValue.ToString();
                }
            }
        }

	}//end SimpleDataTypeMenu

}//end namespace System