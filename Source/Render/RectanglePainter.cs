///////////////////////////////////////////////////////////
//  RectanglePainter.cs
//  Implementation of the Class RectanglePainter
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:10
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Media;
using System.Windows;
using System.Windows.Shapes;
using AutosarGuiEditor.Source.Utility;
using System.Xml.Linq;
using AutosarGuiEditor.Source.Painters.Boundaries;
using AutosarGuiEditor.Source.Interfaces;

namespace System 
{
    public class RectanglePainter : IRender, IClickable, IBoundary
    {
        public Point TopLeft = new Point(0, 0);

        public Point BottomRight = new Point(0, 0);
        
        public double Width
        {
            get 
            {
                return Math.Abs(BottomRight.X - TopLeft.X);
            }
            set
            {
                BottomRight.X = TopLeft.X + value;
            }
        }

        public double Right
        {
            get {
                return BottomRight.X;
            }
            set
            {
                BottomRight.X = value;
            }
        }

        public double Bottom
        {
            get
            {
                return BottomRight.Y;
            }
            set
            {
                BottomRight.Y = value;
            }
        }

        public Point Center
        {
            get
            {
                Point center = new Point((TopLeft.X + BottomRight.X) / 2, (TopLeft.Y + BottomRight.Y) / 2);
                return center;
            }
        }
        public double Height
        {
            get
            {
                return Math.Abs(BottomRight.Y - TopLeft.Y);
            }
            set
            {
                BottomRight.Y = TopLeft.Y + value;
            }
        }

        public double Left
        {
            get
            {
                return TopLeft.X;
            }
            set
            {
                double diff = TopLeft.X - value;
                TopLeft.X = value;
                BottomRight.X -= diff;
            }
        }

        public double Top
        {
            get
            {
                return TopLeft.Y;
            }
            set
            {
                double diff = TopLeft.Y - value;
                TopLeft.Y = value;
                BottomRight.Y -= diff;
            }
        }

		public Color BackgroundColor = Colors.White;

        public Color BorderColor = Colors.Black;

		public RectanglePainter()
        {
            
		}

		public void Render(RenderContext context)
        {          
            context.DrawFillRectangle(
                TopLeft.X,
                TopLeft.Y,
                BottomRight.X,
                BottomRight.Y,
                BackgroundColor);

            context.DrawRectangle(
                TopLeft.X,
                TopLeft.Y,
                BottomRight.X,
                BottomRight.Y,
                BorderColor);
		}


        public Boundary GetBoundary(RenderContext context)
        {
            Boundary boundary = new Boundary();
            boundary.Left = Left;
            boundary.Right = Right;
            boundary.Top = Top;
            boundary.Bottom = Bottom;
            return boundary;
        }

        public bool IsClicked(Point point, out Object clickedObject)
        {
            clickedObject = null;
            /* if click was not on port  check myself */
            bool clicked = MathUtility.PointInRectangle(point, this.TopLeft, this.BottomRight);
            if (clicked)
            {
                clickedObject = this;
                return true;
            }
            return false;
        }        

        public void MoveX(double deltaX)
        {
            TopLeft.X += deltaX;
            BottomRight.X += deltaX;            
        }

        public void MoveY(double deltaY)
        {
            TopLeft.Y += deltaY;
            BottomRight.Y += deltaY;
        }

        public virtual void LoadFromXML(XElement xml)
        {
            XElement size = xml.Element("Size");
            double value;
            double.TryParse(size.Element("Left").Value, out value);
            Left = value;

            double.TryParse(size.Element("Right").Value, out value);
            Right = value;

            double.TryParse(size.Element("Top").Value, out value);
            Top = value;

            double.TryParse(size.Element("Bottom").Value, out value);
            Bottom = value;
        }

        public virtual void WriteToXML(XElement root)
        {
            XElement xmlElement = new XElement("Size");
            xmlElement.Add(new XElement("Left", Left.ToString()));
            xmlElement.Add(new XElement("Right", Right.ToString()));
            xmlElement.Add(new XElement("Top", Top.ToString()));
            xmlElement.Add(new XElement("Bottom", Bottom.ToString()));
            root.Add(xmlElement);
        }
	}
}