///////////////////////////////////////////////////////////
//  ClientPortPainter.cs
//  Implementation of the Class ClientPortPainter
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:09
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows;
using AutosarGuiEditor.Source.Interfaces;


namespace AutosarGuiEditor.Source.Painters.PortsPainters 
{
    public static class ClientPort
    {
        public static void RenderEntrails(RenderContext context, RectanglePainter rectangle, RectangleSide side)
        {
            if (side == RectangleSide.Right)
            {
                context.DrawEllipseCentered(rectangle.Left + 4, rectangle.Top + 4, rectangle.Right - 4, rectangle.Bottom - 4, Colors.Blue, 2);
                context.DrawFillRectangle((rectangle.Left + rectangle.Right) / 2, rectangle.Top + 1, rectangle.Right - 1, rectangle.Bottom - 1, Colors.White);
            }
            else if (side == RectangleSide.Left)
            {
                context.DrawEllipseCentered(rectangle.Left + 4, rectangle.Top + 4, rectangle.Right - 4, rectangle.Bottom - 4, Colors.Blue, 2);
                context.DrawFillRectangle(rectangle.Left + 1, rectangle.Bottom - 1, (rectangle.Left + rectangle.Right) / 2, rectangle.Top + 1, Colors.White);
            }
            else if (side == RectangleSide.Bottom)
            {
                context.DrawEllipseCentered(rectangle.Left + 4, rectangle.Top + 4, rectangle.Right - 4, rectangle.Bottom - 4, Colors.Blue, 2);
                context.DrawFillRectangle(rectangle.Left + 1, rectangle.Bottom - 1, rectangle.Right - 1, (rectangle.Top + rectangle.Bottom) / 2, Colors.White);
            }
            else if (side == RectangleSide.Top)
            {
                context.DrawEllipseCentered(rectangle.Left + 4, rectangle.Top + 4, rectangle.Right - 4, rectangle.Bottom - 4, Colors.Blue, 2);
                context.DrawFillRectangle(rectangle.Left + 1, rectangle.Top + 1, rectangle.Right - 1, (rectangle.Top + rectangle.Bottom) / 2, Colors.White);
            }
        }
	}
}