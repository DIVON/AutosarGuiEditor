///////////////////////////////////////////////////////////
//  SenderPort.cs
//  Implementation of the Class SenderPort
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:08
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Media.Imaging;
using System.Windows.Media;
using AutosarGuiEditor.Source.Interfaces;

namespace AutosarGuiEditor.Source.Painters.PortsPainters 
{
    public static class SenderPort
    {
        public static void RenderEntrails(RenderContext context, RectanglePainter rectangle, RectangleSide side)
        {
            if (side == RectangleSide.Left)
            {
                double x1 = rectangle.Right - 4;
                double y1 = rectangle.Top + 4;
                double x2 = rectangle.Left + 4;
                double y2 = rectangle.Top + rectangle.Height / 2;
                double x3 = x1;
                double y3 = rectangle.BottomRight.Y - 4;
                context.DrawFillTriangle(x2, y2, x1, y1, x3, y3, Colors.Black);
                context.DrawLine(x1, y1, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x1, y1, Colors.Black);
            }
            else if (side == RectangleSide.Right)
            {
                double x1 = rectangle.Left + 4;
                double y1 = rectangle.Top + 4;
                double x2 = rectangle.Right - 4;
                double y2 = rectangle.Top + rectangle.Height / 2;
                double x3 = x1;
                double y3 = rectangle.BottomRight.Y - 4;
                context.DrawFillTriangle(x2, y2, x1, y1, x3, y3, Colors.Black);
                context.DrawLine(x1, y1, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x1, y1, Colors.Black);
            }
            else if (side == RectangleSide.Top)
            {
                double x1 = rectangle.Left + 4;
                double y1 = rectangle.Bottom - 4;
                double x2 = rectangle.Right - 4;
                double y2 = y1;
                double x3 = (x1 + x2) / 2.0;
                double y3 = rectangle.Top + 4;
                context.DrawFillTriangle(x2, y2, x1, y1, x3, y3, Colors.Black);
                context.DrawLine(x1, y1, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x1, y1, Colors.Black);
            }
            else if (side == RectangleSide.Bottom)
            {
                double x1 = rectangle.Left + 4;
                double y1 = rectangle.Top + 4;
                double x2 = rectangle.Right - 4;
                double y2 = y1;
                double x3 = (x1 + x2) / 2.0;
                double y3 = rectangle.BottomRight.Y - 4;
                context.DrawFillTriangle(x2, y2, x1, y1, x3, y3, Colors.Black);
                context.DrawLine(x1, y1, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x2, y2, Colors.Black);
                context.DrawLine(x3, y3, x1, y1, Colors.Black);
            }
        }
    }
}