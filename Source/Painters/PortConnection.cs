///////////////////////////////////////////////////////////
//  PortConnectionPainter.cs
//  Implementation of the Class PortConnectionPainter
//  Generated by Enterprise Architect
//  Created on:      24-мар-2019 20:54:10
//  Original author: Ivan
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml.Linq;
using System.Windows.Media;
using AutosarGuiEditor.Source.Utility;
using System.Windows.Shapes;
using System.Windows;
using AutosarGuiEditor.Source.Render;
using AutosarGuiEditor.Source.SystemInterfaces;
using AutosarGuiEditor.Source.Painters.PortsPainters;
using AutosarGuiEditor.Source.Painters;
using AutosarGuiEditor.Source.Painters.Boundaries;
using AutosarGuiEditor.Source.Interfaces;

namespace System 
{
    public class PortConnection : IGUID, IRender, IClickable, ISelectable, IBoundary
    {
        private LineRendererList lines = new LineRendererList();

        public Guid PortPainter1Guid;
        public Guid PortPainter2Guid;

        AnchorList anchors = new AnchorList();

        public double LineWidth;
        public Color LineColor = Colors.Black;

		public PortConnection()
        {

		}

		public void Render(RenderContext context)
        {
            if (!PortPainter2Guid.Equals(Guid.Empty))
            {
                Point startPoint = Port1.GetConnectionPoint();
                Point endPoint = Port2.GetConnectionPoint();

                if (IsSelected())
                {
                    lines.LinesColor = Colors.Red;
                }
                else
                {
                    lines.LinesColor = Colors.Black;
                }

                lines.Render(context);

                if (IsSelected())
                {
                    RectanglePainter rectangle = new RectanglePainter();
                    rectangle.Width = 10;
                    rectangle.Height = 10;
                    rectangle.Left = startPoint.X - rectangle.Width / 2;
                    rectangle.Top  = startPoint.Y - rectangle.Height / 2;
                    rectangle.BackgroundColor = Colors.Blue;
                    rectangle.Render(context);

                    rectangle.Width = 10;
                    rectangle.Height = 10;
                    rectangle.Left = endPoint.X - rectangle.Width / 2;
                    rectangle.Top = endPoint.Y - rectangle.Height / 2;
                    rectangle.BackgroundColor = Colors.Blue;
                    rectangle.Render(context);
                    foreach (AnchorPoint point in anchors)
                    {
                        point.Render(context);
                    }
                }
            }
            else
            {
                Point startPoint = Port1.GetConnectionPoint();
                Point endPoint = SecondPoint;

                context.DrawLine(startPoint.X, startPoint.Y, endPoint.X, endPoint.Y, LineColor);
            }
		}

        public Boundary GetBoundary(RenderContext context)
        {
            Boundary boundary = new Boundary();
            if (lines.Count != 0)
            {
                double minX, maxX, minY, maxY;
                minX = Math.Min(lines[0].StartPoint.X, lines[0].EndPoint.X);
                maxX = Math.Max(lines[0].StartPoint.X, lines[0].EndPoint.X);
                minY = Math.Min(lines[0].StartPoint.Y, lines[0].EndPoint.Y);
                maxY = Math.Max(lines[0].StartPoint.Y, lines[0].EndPoint.Y);

                for (int i = 1; i < lines.Count; i++)
                {
                    double lminX = Math.Min(lines[i].StartPoint.X, lines[i].EndPoint.X);
                    double lmaxX = Math.Max(lines[i].StartPoint.X, lines[i].EndPoint.X);
                    double lminY = Math.Min(lines[i].StartPoint.Y, lines[i].EndPoint.Y);
                    double lmaxY = Math.Max(lines[i].StartPoint.Y, lines[i].EndPoint.Y);

                    minX = Math.Min(minX, lminX);
                    maxX = Math.Max(maxX, lmaxX);
                    minY = Math.Min(minY, lminY);
                    maxY = Math.Max(maxY, lmaxY);
                }

                boundary.Left = minX;
                boundary.Right = maxX;
                boundary.Top = minY;
                boundary.Bottom = maxY;
            }

            return boundary;
        }

        public PortPainter Port1
        {
            get
            {
                return AutosarApplication.GetInstance().FindPort(PortPainter1Guid);
            }
            set
            {
                UpdateName();
                PortPainter1Guid = value.GUID;
            }
        }

        public void UpdateName()
        {
            String name = "NoName";
            if (Port1 != null)
            {
                name = AutosarApplication.GetInstance().FindComponentInstanceByPort(Port1).Name + "_" + Port1.PortDefenition.Name;
            }
            if (Port2 != null)
            {
                name += "_" + AutosarApplication.GetInstance().FindComponentInstanceByPort(Port2).Name + "_" + Port2.PortDefenition.Name;
            }
            this.Name = name;
        }

        public IElementWithPorts Component1
        {
            get
            {
                return AutosarApplication.GetInstance().FindComponentInstanceByPortGuid(PortPainter1Guid);
            }
        }

        public IElementWithPorts Component2
        {
            get
            {
                return AutosarApplication.GetInstance().FindComponentInstanceByPortGuid(PortPainter2Guid);
            }
        }

        public PortPainter Port2
        {
            get
            {
                return AutosarApplication.GetInstance().FindPort(PortPainter2Guid);
            }
            set
            {
                PortPainter2Guid = value.GUID;
                UpdateName();
            }
        }

        public bool IsClicked(Point point, out Object clickedObject)
        {
            
            Point startPoint = Port1.GetConnectionPoint();
            Point endPoint = Port2.GetConnectionPoint();

            clickedObject = null;
   
            foreach (AnchorPoint anchor in anchors)
            {
                if (anchor.IsClicked(point, out clickedObject))
                {
                    Select();
                    return true;
                }
            }

            if (lines.IsClicked(point, out clickedObject))
            {
                clickedObject = this;
                Select();
                return true;
            }
 
            return false;
        }

        public Point SecondPoint;

        bool selected = false;

        public void Unselect()
        {
            selected = false;
        }

        public bool IsSelected()
        {
            return selected;
        }

        public void Select()
        {
            selected = true;
        }

        public PortPainter GetOppositePort(PortPainter port)
        {
            if (port == Port1)
            {
                return Port2;
            }
            else
            {
                return Port1;
            }
        }
        
        public void AddPoint(Point newPoint)
        {
            AnchorPoint point = new AnchorPoint(this);
            point.Position.X = newPoint.X;
            point.Position.Y = newPoint.Y;
            point.OnMove += Anchor_OnMove;
            anchors.Add(point);
            RecreateLines();
        }

        public Boolean RecreateLines()
        {
            lines.Clear();
            if ((Port1 == null) || (Port2 == null))
            {
                return false;
            }
            Point startPoint = Port1.GetConnectionPoint();
            Point endPoint = Port2.GetConnectionPoint();
            if (anchors.Count == 0)
            {
                LineRenderer line = new LineRenderer();
                line.StartPoint = startPoint;
                line.EndPoint = endPoint;
                lines.Add(line);
            }
            else
            {
                lines.AddNewLine(startPoint.X, startPoint.Y, anchors[0].Position.X, startPoint.Y, LineColor);
                lines.AddNewLine(anchors[0].Position.X, startPoint.Y, anchors[0].Position.X, anchors[0].Position.Y, LineColor);

                for (int i = 1; i < anchors.Count; i++)
                {
                    lines.AddNewLine(anchors[i - 1].Position.X, anchors[i - 1].Position.Y, anchors[i].Position.X, anchors[i - 1].Position.Y, LineColor);
                    lines.AddNewLine(anchors[i].Position.X, anchors[i - 1].Position.Y, anchors[i].Position.X, anchors[i].Position.Y, LineColor);
                }

                lines.AddNewLine(anchors[anchors.Count - 1].Position.X, anchors[anchors.Count - 1].Position.Y, anchors[anchors.Count - 1].Position.X, endPoint.Y, LineColor);
                lines.AddNewLine(anchors[anchors.Count - 1].Position.X, endPoint.Y, endPoint.X, endPoint.Y, LineColor);
            }

            if (IsSelected())
            {
                lines.LinesColor = Colors.Black;
                lines.LinesColor = Colors.Red;
            }

            return true;
        }

        Boolean linesCreated = false;

        /* */
        public void UpdateLines()
        {
            if (linesCreated == false)
            {
                linesCreated = RecreateLines();    
                if (linesCreated == false)
                {
                    return;
                }
            }
            Point startPoint = Port1.GetConnectionPoint();
            Point endPoint = Port2.GetConnectionPoint();
            if (anchors.Count == 0)
            {
                lines[0].UpdateCoordinates(startPoint, endPoint);                
            }
            else
            {
                lines[0].UpdateCoordinates(startPoint.X, startPoint.Y, anchors[0].Position.X, startPoint.Y);
                lines[1].UpdateCoordinates(anchors[0].Position.X, startPoint.Y, anchors[0].Position.X, anchors[0].Position.Y);

                int lineindex = 1;
                for (int i = 1; i < anchors.Count; i++)
                {
                    lines[i + 1].UpdateCoordinates(anchors[i - 1].Position.X, anchors[i - 1].Position.Y, anchors[i].Position.X, anchors[i - 1].Position.Y);
                    lines[i + 2].UpdateCoordinates(anchors[i].Position.X, anchors[i - 1].Position.Y, anchors[i].Position.X, anchors[i].Position.Y);
                    lineindex += 2;
                }

                lines[lineindex + 1].UpdateCoordinates(anchors[anchors.Count - 1].Position.X, anchors[anchors.Count - 1].Position.Y, anchors[anchors.Count - 1].Position.X, endPoint.Y);
                lines[lineindex + 2].UpdateCoordinates(anchors[anchors.Count - 1].Position.X, endPoint.Y, endPoint.X, endPoint.Y);
            }
        }

        void Anchor_OnMove(object sender, Point translate)
        {
            UpdateLines();
        }

        public void DeleteAnchor(Point closestPoint)
        {
            if (anchors.Count == 0)
            {
                return;
            }
            
            AnchorPoint closestAnchor = anchors[0];
            double minDistance = MathUtility.Distance(closestAnchor.Position, closestPoint);

            for (int i = 1; i < anchors.Count; i++ )
            {
                double currDistance = MathUtility.Distance(anchors[i].Position, closestPoint);
                if (currDistance < minDistance)
                {
                    closestAnchor = anchors[i];
                    minDistance = currDistance;
                }
            }

            anchors.Remove(closestAnchor);

            UpdateLines();
        }

        public override void WriteToXML(XElement root)
        {
            XElement xmlElement = new XElement("Connection");
            base.WriteToXML(xmlElement);
            xmlElement.Add(new XElement("PortPainter1Guid", PortPainter1Guid.ToString("B")));
            xmlElement.Add(new XElement("PortPainter2Guid", PortPainter2Guid.ToString("B")));
            anchors.WriteToXML(xmlElement);
            root.Add(xmlElement);
        }

        public void UpdateAnchorsOnMove()
        {
            foreach (AnchorPoint anchor in anchors)
            {
                anchor.OnMove += Anchor_OnMove;
            }
        }

        public override void LoadFromXML(XElement xml)
        {
            base.LoadFromXML(xml);

            String Component1Str = XmlUtilits.GetFieldValue(xml, "PortPainter1Guid", "");
            PortPainter1Guid = GuidUtils.GetGuid(Component1Str, false);

            String Component2Str = XmlUtilits.GetFieldValue(xml, "PortPainter2Guid", "");
            PortPainter2Guid = GuidUtils.GetGuid(Component2Str, false);

            anchors.LoadFromXML(xml, this);
            RecreateLines();
        }
	}
}